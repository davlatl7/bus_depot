
// @title Bus Depot API
// @version 1.0
// @description API –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–≤—Ç–æ–±—É—Å–Ω—ã–º –ø–∞—Ä–∫–æ–º
// @contact.name –ü–æ–¥–¥–µ—Ä–∂–∫–∞
// @contact.email bus_depot@example.com
// @host localhost:8080
// @BasePath /
// @schemes http
package main


import (
	"bus_depot/internal/configs"
	"bus_depot/internal/handlers"
	"bus_depot/internal/logger"
	"bus_depot/internal/migrations"
	"bus_depot/internal/repository"
	"bus_depot/internal/service"
	"bus_depot/pkg/db"
	"github.com/gin-gonic/gin"

	ginSwagger "github.com/swaggo/gin-swagger"
	swaggerFiles "github.com/swaggo/files"
	_ "bus_depot/docs"

)

func main() {
	// ‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
	if err := configs.ReadSettings(); err != nil {
		panic("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: " + err.Error())
	}
	if err := logger.Init(); err != nil {
		panic("–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ª–æ–≥–≥–µ—Ä–∞: " + err.Error())
	}

	// ‚úÖ –ë–î
	dbConn, err := db.InitDB()
	if err != nil {
		logger.Error.Fatalf("–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: %v", err)
	}

	// ‚úÖ –ú–∏–≥—Ä–∞—Ü–∏–∏
	if err := migrations.InitMigrations(dbConn); err != nil {
		logger.Error.Fatalf("–û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏: %v", err)
	}
	logger.Info.Println("–ú–∏–≥—Ä–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã")

	// ‚úÖ –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ –∏ —Å–µ—Ä–≤–∏—Å—ã
	busRepo := repository.NewBusRepository(dbConn)
	userRepo := repository.NewUserRepository(dbConn)
	workScheduleRepo := repository.NewWorkScheduleRepository(dbConn)
	reportRepo := repository.NewReportRepository(dbConn)
	busService := service.NewBusService(busRepo)
	userService := service.NewUserService(userRepo)
	workScheduleService := service.NewWorkScheduleService(workScheduleRepo)
	reportService := service.NewReportService(reportRepo)
	authService := service.NewAuthService()

	// ‚úÖ –•–µ–Ω–¥–ª–µ—Ä—ã
	busHandler := handlers.NewBusHandler(busService)
	userHandler := handlers.NewUserHandler(userService)
	authHandler := handlers.NewAuthHandler(authService, userService)
	workScheduleHandler := handlers.NewWorkScheduleHandler(workScheduleService)
	reportHandler := handlers.NewReportHandler(reportService)

	// ‚úÖ –†–æ—É—Ç–µ—Ä
	router := gin.Default()

	router.GET("/swagger/*any", ginSwagger.WrapHandler(swaggerFiles.Handler))




	// ‚úÖ –†–æ—É—Ç—ã
	handlers.InitRoutes(router, authHandler, userHandler, busHandler, workScheduleHandler, reportHandler)

	// ‚úÖ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
	port := "8080"
	logger.Info.Printf("üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É %s", port)
	if err := router.Run(":" + port); err != nil {
		logger.Error.Fatalf("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: %v", err)
	}
}
